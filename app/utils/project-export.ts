import type { FileMap } from '~/lib/stores/files';
import JSZip from 'jszip';

export interface ProjectExportData {
  name: string;
  description?: string;
  files: FileMap;
}

export async function exportProjectAsZip(projectData: ProjectExportData): Promise<Blob> {
  const zip = new JSZip();

  const projectName = projectData.name.replace(/[^a-z0-9]/gi, '_').toLowerCase();
  const projectFolder = zip.folder(projectName);

  if (!projectFolder) {
    throw new Error('Failed to create project folder in ZIP');
  }

  for (const [filePath, fileData] of Object.entries(projectData.files)) {
    if (fileData && fileData.type === 'file' && typeof fileData.content === 'string') {
      projectFolder.file(filePath, fileData.content);
    }
  }

  const readmeContent = `# ${projectData.name}

${projectData.description || 'No description provided'}

## Generated by Bolt.new

This project was created using Bolt.new, an AI-powered web development platform.

## Getting Started

1. Install dependencies:
\`\`\`bash
npm install
\`\`\`

2. Run the development server:
\`\`\`bash
npm run dev
\`\`\`

3. Open your browser and visit the local development URL.
`;

  projectFolder.file('README.md', readmeContent);

  const blob = await zip.generateAsync({ type: 'blob' });
  return blob;
}

export function downloadBlob(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

export async function exportAndDownloadProject(projectData: ProjectExportData): Promise<void> {
  const blob = await exportProjectAsZip(projectData);
  const filename = `${projectData.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.zip`;
  downloadBlob(blob, filename);
}
